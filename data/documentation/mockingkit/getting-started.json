{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/mockingkit\/getting-started"]}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Terminology","text":"Terminology"},{"inlineContent":[{"type":"text","text":"Before we continue, let’s clarify some terms:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Mock"},{"type":"text","text":" is a simulated object that mimic the behaviour of real objects in controlled ways."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Mocking"},{"type":"text","text":" is to use configurable and inspectable functionality, for instance in unit tests."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"Registration","type":"codeVoice"},{"type":"text","text":" is to register return values for a mock function, based on its input arguments."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Call\/Invoke","type":"codeVoice"},{"type":"text","text":" is to call a function in a way that records the call, its arguments, the result, etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Inspection","type":"codeVoice"},{"text":" is to inspect the recorded calls, e.g. to verify that a function has been called, with what arguments, etc.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"Let’s have a look at how this works in MockingKit."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Creating a mock","anchor":"Creating-a-mock"},{"inlineContent":[{"type":"text","text":"MockingKit lets you create mocks of any protocol or open class, after which you can "},{"type":"codeVoice","code":"call"},{"type":"text","text":" functions, "},{"type":"codeVoice","code":"register"},{"text":" results, ","type":"text"},{"type":"codeVoice","code":"record"},{"text":" method invocations, and ","type":"text"},{"type":"codeVoice","code":"inspect"},{"type":"text","text":" recorded calls."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For instance, consider this simple protocol:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["protocol MyProtocol {","","    func doStuff(int: Int, string: String) -> String","}"]},{"inlineContent":[{"type":"text","text":"With MockingKit, you can easily create a mock implementation of this protocol:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import MockingKit","","class MyMock: Mock, MyProtocol {","","    \/\/ Define a lazy reference for each function you want to mock","    lazy var doStuffRef = MockReference(doStuff)","","    \/\/ Functions must then call the reference to be recorded","    func doStuff(int: Int, string: String) -> String {","        call(doStuffRef, args: (int, string))","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"To mock a class, you just have to subclass the class and implement the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MockingKit\/documentation\/MockingKit\/Mockable"},{"type":"text","text":" protocol:"}]},{"code":["import MockingKit","","class MockUserDefaults: UserDefaults, Mockable {","","    \/\/ You must provide a mock when implementing Mockable","    var mock = Mock()","","    \/\/ You can now create lazy references just like in the protocol mock above","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/MockingKit\/documentation\/MockingKit\/Mock","isActive":true,"type":"reference"},{"type":"text","text":" is actually just a "},{"identifier":"doc:\/\/MockingKit\/documentation\/MockingKit\/Mockable","type":"reference","isActive":true},{"type":"text","text":" that returns itself as the "},{"identifier":"doc:\/\/MockingKit\/documentation\/MockingKit\/Mockable\/mock","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With a mock in place, you can now start mocking functionality in your unit tests or app."}]},{"text":"Using the mock","anchor":"Using-the-mock","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"You can now use the mock to ","type":"text"},{"type":"codeVoice","code":"register"},{"type":"text","text":" function results, "},{"type":"codeVoice","code":"call"},{"type":"text","text":" functions and "},{"code":"inspect","type":"codeVoice"},{"type":"text","text":" recorded calls."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Create a mock","let mock = MyMock()","","\/\/ Register a doStuff result","mock.registerResult(for: mock.doStuffRef) { args in String(args.1.reversed()) }","","\/\/ Calling doStuff will now return the pre-registered result","let result = mock.doStuff(int: 42, string: \"string\")    \/\/ => \"gnirts\"","","\/\/ You can now inspect calls made to doStuff","let calls = mock.calls(to: mock.doStuffRef)             \/\/ => 1 item","calls[0].arguments.0                                    \/\/ => 42","calls[0].arguments.1                                    \/\/ => \"string\"","calls[0].result                                         \/\/ => \"gnirts\"","mock.hasCalled(mock.doStuffRef)                         \/\/ => true","mock.hasCalled(mock.doStuffRef, numberOfTimes: 1)       \/\/ => true","mock.hasCalled(mock.doStuffRef, numberOfTimes: 2)       \/\/ => false"]},{"inlineContent":[{"text":"For more compact code, you can use keypaths:","type":"text"}],"type":"paragraph"},{"code":["\/\/ Create a mock","let mock = MyMock()","","\/\/ Register a doStuff result","mock.registerResult(for: \\.doStuffRef) { args in String(args.1.reversed()) }","","\/\/ Calling doStuff will now return the pre-registered result","let result = mock.doStuff(int: 42, string: \"string\")    \/\/ => \"gnirts\"","","\/\/ You can now inspect calls made to doStuff","let calls = mock.calls(to: \\.doStuffRef)                \/\/ => 1 item","calls[0].arguments.0                                    \/\/ => 42","calls[0].arguments.1                                    \/\/ => \"string\"","calls[0].result                                         \/\/ => \"gnirts\"","mock.hasCalled(\\.doStuffRef)                            \/\/ => true","mock.hasCalled(\\.doStuffRef, numberOfTimes: 1)          \/\/ => true","mock.hasCalled(\\.doStuffRef, numberOfTimes: 2)          \/\/ => false"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can configure the mock in any way you want to change the behavior of your tests at any time, call the mock instead of a real implementation (e.g. a network service, a database etc.), and inspect the mock to ensure that your code calls it as expected."}],"type":"paragraph"},{"level":2,"anchor":"Important-about-registering-mock-function-return-values","type":"heading","text":"Important about registering mock function return values"},{"inlineContent":[{"type":"text","text":"There are some things to consider regarding function return values:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"If a function return value is non-optional, you must register a return value before calling the function. Calling it before registering a return value will cause a crash.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If a function return value is optional, registering a return value is optional. Calling the function before registering a return value will just return nil and not crash."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"You can register new return values at any time, for instance to try many different variations within the same test.","type":"text"}],"type":"paragraph"},{"text":"Multiple function arguments","level":2,"anchor":"Multiple-function-arguments","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Since mock arguments are handled as tuples, inspection behaves a bit different if a mocked function has multiple arguments.","type":"text"}]},{"inlineContent":[{"text":"For instance, consider a protocol that looks like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol MyProtocol {","","    func doStuff(int: Int, string: String) -> String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A MockingKit mock would look like this:"}]},{"syntax":"swift","type":"codeListing","code":["class MyMock: Mock, MyProtocol {","","    lazy var doStuffRef = MockReference(doStuff)","","    func doStuff(int: Int, string: String) -> String {","        call(doStuffRef, args: (int, string))","    }","}"]},{"inlineContent":[{"type":"text","text":"Since arguments are handled as tuples, you must then use tuple positions to inspect them:"}],"type":"paragraph"},{"syntax":"swift","code":["let mock = MyMock()","mock.registerResult(for: mock.doStuffRef) { args in String(args.1.reversed()) }","let result = mock.doStuff(int: 42, string: \"string\")    \/\/ => \"gnirts\"","let inv = mock.invokations(of: mock.doStuffRef)         \/\/ => 1 item","inv[0].arguments.0                                      \/\/ => 42","inv[0].arguments.1                                      \/\/ => \"message\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is no upper-limit to the number of function arguments you can use in a mocked function."}]},{"text":"Multiple functions with the same name","type":"heading","level":2,"anchor":"Multiple-functions-with-the-same-name"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mock references require some extra considerations when a mock has multiple functions with the same name."}]},{"type":"paragraph","inlineContent":[{"text":"For instance, consider a protocol that looks like this:","type":"text"}]},{"code":["protocol MyProtocol {","","    func doStuff(with int: Int) -> Bool","    func doStuff(with int: Int, string: String) -> String","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You must then specify the function signature when creating the mock references:"}]},{"type":"codeListing","code":["class MyMock: Mock, MyProtocol {","","    lazy var doStuffWithIntRef = MockReference(doStuff as (Int) -> Bool)","    lazy var doStuffWithIntAndStringRef = MockReference(doStuff as (Int, String) -> String)","","    func doStuff(with int: Int) -> Bool {","        call(doStuffWithInt, args: (int))","    }","","    func doStuff(with int: Int, string: String) -> String {","        call(doStuffWithIntAndStringRef, args: (int, string))","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This gives you a unique references for every unique function."}]},{"level":2,"anchor":"Properties","text":"Properties","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Properties can’t currently be mocked, since the reference model requires a function."}]},{"inlineContent":[{"text":"If you want to mock properties, you can invoke custom function references in the mock’s getter and\/or setter.","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Async-functions","text":"Async functions"},{"inlineContent":[{"text":"MockingKit supports Swift concurrency and lets you mock any ","type":"text"},{"code":"async","type":"codeVoice"},{"text":" function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Mocking ","type":"text"},{"code":"async","type":"codeVoice"},{"type":"text","text":" functions works exactly like mocking non-async functions. No additional code is required."}],"type":"paragraph"},{"level":2,"type":"heading","text":"Completion blocks","anchor":"Completion-blocks"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions with completion blocks are just "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" functions where the completion block is just an argument."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mocking these kind of functions works exactly like mocking any other functions. No additional code is required."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You must however manually call the completion from within your mock, if you want them to trigger."}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MockingKit\/documentation\/MockingKit\/Getting-Started"},"abstract":[{"text":"This article describes how you get started with MockingKit.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/MockingKit\/documentation\/MockingKit"]]},"kind":"article","metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"MockingKit"}],"title":"Getting started"},"sections":[],"references":{"doc://MockingKit/documentation/MockingKit":{"title":"MockingKit","url":"\/documentation\/mockingkit","role":"collection","type":"topic","abstract":[{"type":"text","text":"MockingKit lets you mock protocols and classes in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"."}],"kind":"symbol","identifier":"doc:\/\/MockingKit\/documentation\/MockingKit"},"doc://MockingKit/documentation/MockingKit/Mock":{"abstract":[{"type":"text","text":"This class can be inherited when creating a mock class that"},{"type":"text","text":" "},{"text":"doesn’t have to inherit another class.","type":"text"}],"identifier":"doc:\/\/MockingKit\/documentation\/MockingKit\/Mock","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Mock"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mock"}],"title":"Mock","url":"\/documentation\/mockingkit\/mock"},"doc://MockingKit/documentation/MockingKit/Mockable/mock":{"title":"mock","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"mock"},{"kind":"text","text":": "},{"text":"Mock","preciseIdentifier":"s:10MockingKit4MockC","kind":"typeIdentifier"}],"abstract":[],"identifier":"doc:\/\/MockingKit\/documentation\/MockingKit\/Mockable\/mock","role":"symbol","type":"topic","url":"\/documentation\/mockingkit\/mockable\/mock","kind":"symbol"},"doc://MockingKit/documentation/MockingKit/Mockable":{"identifier":"doc:\/\/MockingKit\/documentation\/MockingKit\/Mockable","navigatorTitle":[{"kind":"identifier","text":"Mockable"}],"url":"\/documentation\/mockingkit\/mockable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Mockable","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"This protocol can be implemented when creating a mock class"},{"type":"text","text":" "},{"text":"that has to inherit another class.","type":"text"}],"title":"Mockable"}}}